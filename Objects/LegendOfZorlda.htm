<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\LegendOfZorlda.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\LegendOfZorlda.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Fri May 08 03:34:25 2020
<BR><P>
<H3>Maximum Stack Usage =        200 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; LCD_OutDec &rArr;  LCD_OutDec (Cycle)
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[83]">Reset_Handler</a>
 <LI><a href="#[10c]">writecommand</a>
 <LI><a href="#[104]">writedata</a>
 <LI><a href="#[93]">LCD_OutDec</a>
 <LI><a href="#[95]">LCD_OutFix</a>
 <LI><a href="#[134]">Random_Init</a>
 <LI><a href="#[15f]">Random32</a>
 <LI><a href="#[ba]">Random</a>
 <LI><a href="#[12c]">DisableInterrupts</a>
 <LI><a href="#[130]">EnableInterrupts</a>
 <LI><a href="#[160]">StartCritical</a>
 <LI><a href="#[161]">EndCritical</a>
 <LI><a href="#[162]">WaitForInterrupt</a>
 <LI><a href="#[9e]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[4]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">NMI_Handler</a><BR>
 <LI><a href="#[5]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">HardFault_Handler</a><BR>
 <LI><a href="#[6]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">MemManage_Handler</a><BR>
 <LI><a href="#[7]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">BusFault_Handler</a><BR>
 <LI><a href="#[8]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">UsageFault_Handler</a><BR>
 <LI><a href="#[9]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SVC_Handler</a><BR>
 <LI><a href="#[a]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">DebugMon_Handler</a><BR>
 <LI><a href="#[b]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">PendSV_Handler</a><BR>
 <LI><a href="#[1b]">ADC0Seq0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b]">ADC0Seq0_Handler</a><BR>
 <LI><a href="#[93]">LCD_OutDec</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[93]">LCD_OutDec</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1b]">ADC0Seq0_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[1c]">ADC0Seq1_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[1d]">ADC0Seq2_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[1e]">ADC0Seq3_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[3d]">ADC1Seq0_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[3e]">ADC1Seq1_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[3f]">ADC1Seq2_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[40]">ADC1Seq3_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[7]">BusFault_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[34]">CAN0_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[35]">CAN1_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[36]">CAN2_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[26]">Comp0_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[27]">Comp1_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[28]">Comp2_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[a]">DebugMon_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[82]">Ending</a> from legendofzorlda.o(i.Ending) referenced from legendofzorlda.o(i.main)
 <LI><a href="#[37]">Ethernet_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[42]">ExtBus_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[5f]">FPU_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[67]">Fan0_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[2a]">FlashCtl_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[d]">GPIOPortA_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[e]">GPIOPortB_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[f]">GPIOPortC_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[10]">GPIOPortD_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[11]">GPIOPortE_Handler</a> from item.o(i.GPIOPortE_Handler) referenced from startup.o(RESET)
 <LI><a href="#[2b]">GPIOPortF_Handler</a> from legendofzorlda.o(i.GPIOPortF_Handler) referenced from startup.o(RESET)
 <LI><a href="#[2c]">GPIOPortG_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[2d]">GPIOPortH_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[43]">GPIOPortJ_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[44]">GPIOPortK_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[45]">GPIOPortL_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[64]">GPIOPortM_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[65]">GPIOPortN_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[69]">GPIOPortP1_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[6a]">GPIOPortP2_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[6b]">GPIOPortP3_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[6c]">GPIOPortP4_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[6d]">GPIOPortP5_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[6e]">GPIOPortP6_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[6f]">GPIOPortP7_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[68]">GPIOPortP_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[71]">GPIOPortQ1_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[72]">GPIOPortQ2_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[73]">GPIOPortQ3_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[74]">GPIOPortQ4_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[75]">GPIOPortQ5_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[76]">GPIOPortQ6_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[77]">GPIOPortQ7_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[70]">GPIOPortQ_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[78]">GPIOPortR_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[79]">GPIOPortS_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[5]">HardFault_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[38]">Hibernate_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[15]">I2C0_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[32]">I2C1_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[4d]">I2C2_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[4e]">I2C3_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[62]">I2C4_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[63]">I2C5_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[41]">I2S0_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[61]">LPC0_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[6]">MemManage_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[4]">NMI_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[60]">PECI0_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[16]">PWM0Fault_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[17]">PWM0Generator0_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[18]">PWM0Generator1_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[19]">PWM0Generator2_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[3a]">PWM0Generator3_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[7e]">PWM1Fault_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[7a]">PWM1Generator0_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[7b]">PWM1Generator1_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[7c]">PWM1Generator2_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[7d]">PWM1Generator3_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[b]">PendSV_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[1a]">Quadrature0_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[33]">Quadrature1_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[66]">Quadrature2_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[83]">Reset_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[14]">SSI0_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[2f]">SSI1_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[46]">SSI2_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[47]">SSI3_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[9]">SVC_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[80]">Sample_Joystick</a> from legendofzorlda.o(i.Sample_Joystick) referenced 2 times from legendofzorlda.o(i.main)
 <LI><a href="#[81]">ScoreTrack</a> from legendofzorlda.o(i.ScoreTrack) referenced from legendofzorlda.o(i.main)
 <LI><a href="#[7f]">SoundTask</a> from sound.o(i.SoundTask) referenced from sound.o(i.Sound_Init)
 <LI><a href="#[29]">SysCtl_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[c]">SysTick_Handler</a> from legendofzorlda.o(i.SysTick_Handler) referenced from startup.o(RESET)
 <LI><a href="#[20]">Timer0A_Handler</a> from timer0.o(i.Timer0A_Handler) referenced from startup.o(RESET)
 <LI><a href="#[21]">Timer0B_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[22]">Timer1A_Handler</a> from timer1.o(i.Timer1A_Handler) referenced from startup.o(RESET)
 <LI><a href="#[23]">Timer1B_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[24]">Timer2A_Handler</a> from sound.o(i.Timer2A_Handler) referenced from startup.o(RESET)
 <LI><a href="#[25]">Timer2B_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[30]">Timer3A_Handler</a> from music.o(i.Timer3A_Handler) referenced from startup.o(RESET)
 <LI><a href="#[31]">Timer3B_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[4f]">Timer4A_Handler</a> from texas.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[50]">Timer4B_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[51]">Timer5A_Handler</a> from texas.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[52]">Timer5B_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[12]">UART0_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[13]">UART1_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[2e]">UART2_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[48]">UART3_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[49]">UART4_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[4a]">UART5_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[4b]">UART6_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[4c]">UART7_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[39]">USB0_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[8]">UsageFault_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[1f]">WDT_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[53]">WideTimer0A_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[54]">WideTimer0B_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[55]">WideTimer1A_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[56]">WideTimer1B_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[57]">WideTimer2A_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[58]">WideTimer2B_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[59]">WideTimer3A_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[5a]">WideTimer3B_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[5b]">WideTimer4A_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[5c]">WideTimer4B_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[5d]">WideTimer5A_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[5e]">WideTimer5B_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[3c]">uDMA_Error</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[3b]">uDMA_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[83]"></a>Reset_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[4]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>ADC0Seq0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0Seq0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0Seq0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC0Seq1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>ADC0Seq2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>ADC0Seq3_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>ADC1Seq0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>ADC1Seq1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>ADC1Seq2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>ADC1Seq3_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>CAN0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>CAN1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>CAN2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>Comp0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>Comp1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>Comp2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>Ethernet_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>ExtBus_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>FPU_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>Fan0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>FlashCtl_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>GPIOPortA_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>GPIOPortB_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>GPIOPortC_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>GPIOPortD_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>GPIOPortG_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>GPIOPortH_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>GPIOPortJ_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>GPIOPortK_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>GPIOPortL_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>GPIOPortM_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>GPIOPortN_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>GPIOPortP1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>GPIOPortP2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>GPIOPortP3_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>GPIOPortP4_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>GPIOPortP5_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>GPIOPortP6_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>GPIOPortP7_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>GPIOPortP_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>GPIOPortQ1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>GPIOPortQ2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>GPIOPortQ3_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>GPIOPortQ4_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>GPIOPortQ5_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>GPIOPortQ6_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>GPIOPortQ7_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>GPIOPortQ_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>GPIOPortR_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>GPIOPortS_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>Hibernate_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>I2C0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>I2C1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>I2C2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>I2C3_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>I2C4_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>I2C5_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>I2S0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>LPC0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>PECI0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>PWM0Fault_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>PWM0Generator0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>PWM0Generator1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>PWM0Generator2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>PWM0Generator3_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>PWM1Fault_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>PWM1Generator0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>PWM1Generator1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>PWM1Generator2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>PWM1Generator3_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>Quadrature0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>Quadrature1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>Quadrature2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>SSI0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>SSI1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>SSI2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>SSI3_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>SysCtl_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>Timer0B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>Timer1B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>Timer2B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>Timer3B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>Timer4B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>Timer5B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>UART0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>UART1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>UART2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>UART3_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>UART4_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>UART5_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>UART6_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>UART7_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>USB0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>WDT_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>WideTimer0A_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>WideTimer0B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>WideTimer1A_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>WideTimer1B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>WideTimer2A_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>WideTimer2B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>WideTimer3A_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>WideTimer3B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>WideTimer4A_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>WideTimer4B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>WideTimer5A_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>WideTimer5B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>uDMA_Error</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>uDMA_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler
</UL>

<P><STRONG><a name="[85]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[87]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[13a]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[13b]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[13c]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[13d]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[13e]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[8b]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[13f]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[140]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[141]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[142]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[143]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[144]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[145]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[146]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[147]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[148]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[149]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[14a]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[14b]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[14c]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[14d]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[14e]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[14f]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[150]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[151]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[152]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[153]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[90]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[154]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[155]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[156]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[157]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[158]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[159]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[15a]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[86]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[15b]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[88]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[8a]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[15c]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[8c]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; LCD_OutDec &rArr;  LCD_OutDec (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[15d]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[9f]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[8f]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[15e]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[91]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[10c]"></a>writecommand</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, lcd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_SetRotation
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_InvertDisplay
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_InitR
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAddrWindow
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandList
</UL>

<P><STRONG><a name="[104]"></a>writedata</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, lcd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_SetRotation
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawBitmap
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_InitR
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_FillRect
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAddrWindow
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushColor
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandList
</UL>

<P><STRONG><a name="[93]"></a>LCD_OutDec</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, print.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = LCD_OutDec &rArr;  LCD_OutDec (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_OutChar
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_OutDec
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_OutDec
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ending
</UL>

<P><STRONG><a name="[95]"></a>LCD_OutFix</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, print.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_OutChar
</UL>

<P><STRONG><a name="[134]"></a>Random_Init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, random.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15f]"></a>Random32</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, random.o(.text), UNUSED)

<P><STRONG><a name="[ba]"></a>Random</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, random.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Teleport_Enemy
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Enemy_Random
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_RedChest
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_GreenChest
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_BlueChest
</UL>

<P><STRONG><a name="[12c]"></a>DisableInterrupts</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[130]"></a>EnableInterrupts</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[160]"></a>StartCritical</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(.text), UNUSED)

<P><STRONG><a name="[161]"></a>EndCritical</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(.text), UNUSED)

<P><STRONG><a name="[162]"></a>WaitForInterrupt</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(.text), UNUSED)

<P><STRONG><a name="[9e]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[9b]"></a>ADC1_Init</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, texas.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC1_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExaS_Init
</UL>

<P><STRONG><a name="[9a]"></a>SetCode</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, texas.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExaS_Init
</UL>

<P><STRONG><a name="[99]"></a>UART0_Init</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, texas.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART0_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExaS_Init
</UL>

<P><STRONG><a name="[98]"></a>SetCourse</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, texas.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExaS_Init
</UL>

<P><STRONG><a name="[97]"></a>PLL_Init</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, texas.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExaS_Init
</UL>

<P><STRONG><a name="[96]"></a>TExaS_Init</STRONG> (Thumb, 282 bytes, Stack size 4 bytes, texas.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TExaS_Init &rArr; UART0_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PLL_Init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCourse
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCode
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[163]"></a>StopTimer4</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, texas.o(.text), UNUSED)

<P><STRONG><a name="[164]"></a>StartTimer4</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, texas.o(.text), UNUSED)

<P><STRONG><a name="[4f]"></a>Timer4A_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, texas.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[9c]"></a>ADC1_In</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, texas.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer5A_Handler
</UL>

<P><STRONG><a name="[51]"></a>Timer5A_Handler</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, texas.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Timer5A_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_In
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[165]"></a>TExaS_Stop</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, texas.o(.text), UNUSED)

<P><STRONG><a name="[166]"></a>copy</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, texas.o(.text), UNUSED)

<P><STRONG><a name="[167]"></a>SetMode</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, texas.o(.text), UNUSED)

<P><STRONG><a name="[168]"></a>UART0_InChar</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, texas.o(.text), UNUSED)

<P><STRONG><a name="[169]"></a>UART0_InCharNonBlocking</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, texas.o(.text), UNUSED)

<P><STRONG><a name="[16a]"></a>UART0_OutChar</STRONG> (Thumb, 200 bytes, Stack size 0 bytes, texas.o(.text), UNUSED)

<P><STRONG><a name="[16b]"></a>UART0_OutCharNonBlock</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, texas.o(.text), UNUSED)

<P><STRONG><a name="[b5]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Use_WoodShield
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Use_HShield
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Water2Stage
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Water1Stage
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Stairs
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_SlimeBossStage
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Shop
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_OrcBossStage
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_LynelBossStage
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Lava4Stage
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Lava3Stage
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Lava2Stage
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Lava1Stage
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_IcegolemBossStage
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Ice3Stage
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Ice2Stage
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Ice1Stage
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Ganon1BossStage
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Bush2Stage
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Bush1Stage
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Brick2Stage
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Brick1Stage
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Explode_Bomb
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Proj
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Proj_Player
</UL>

<P><STRONG><a name="[16c]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[16d]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[16e]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[16f]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[170]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[171]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[89]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[8e]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[172]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[9d]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[173]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[92]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[174]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[175]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[176]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[10f]"></a>ADC_InX</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, adc.o(i.ADC_InX))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sample_Joystick
</UL>

<P><STRONG><a name="[110]"></a>ADC_InY</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, adc.o(i.ADC_InY))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sample_Joystick
</UL>

<P><STRONG><a name="[12d]"></a>ADC_Init</STRONG> (Thumb, 232 bytes, Stack size 0 bytes, adc.o(i.ADC_Init))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12e]"></a>Button_Init</STRONG> (Thumb, 354 bytes, Stack size 0 bytes, legendofzorlda.o(i.Button_Init))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[139]"></a>Check_Adjacent</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, entity.o(i.Check_Adjacent))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a0]"></a>Check_Damage</STRONG> (Thumb, 884 bytes, Stack size 40 bytes, player.o(i.Check_Damage))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = Check_Damage &rArr; ST7735_DrawBitmap &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_InvertDisplay
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawBitmap
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[bb]"></a>Check_Item</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, player.o(i.Check_Item))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_RedChest
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_GreenChest
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_BlueChest
</UL>

<P><STRONG><a name="[a4]"></a>Check_Move</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, stage.o(i.Check_Move))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Check_Move
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Use_WoodShield
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Use_Needles
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Use_Mjolnir
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Use_MSword
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Use_LightBow
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Use_HShield
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Use_FireRod
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Use_Dekunuts
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Use_Bow
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Use_Bombchu
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Use_Bomb
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Omni_Fire
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Proj
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Entity_Fire
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Move_Player
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Teleport_Enemy
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Enemy_Random
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Enemy_Proj
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Enemy_Homing
</UL>

<P><STRONG><a name="[a3]"></a>Check_Move_Player</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, player.o(i.Check_Move_Player))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Check_Move_Player &rArr; Check_Move
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Move
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Player_Move_Up
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Player_Move_Right
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Player_Move_Left
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Player_Move_Down
</UL>

<P><STRONG><a name="[b3]"></a>Check_Overlap</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, entity.o(i.Check_Overlap))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Check_Overlap
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Use_Shortsword
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Use_Mjolnir
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Use_MSword
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Use_BGSword
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Explode_Bomb
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[118]"></a>Check_Rupoos</STRONG> (Thumb, 204 bytes, Stack size 20 bytes, player.o(i.Check_Rupoos))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Check_Rupoos
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[f7]"></a>Check_Walls</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stage.o(i.Check_Walls))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Check_Walls
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Proj
</UL>

<P><STRONG><a name="[a5]"></a>Clear_Obstacles</STRONG> (Thumb, 322 bytes, Stack size 32 bytes, stage.o(i.Clear_Obstacles))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = Clear_Obstacles &rArr; ST7735_DrawBitmap &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawBitmap
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[115]"></a>DAC_Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, dac.o(i.DAC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DAC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sound_Init
</UL>

<P><STRONG><a name="[111]"></a>DAC_Out</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dac.o(i.DAC_Out))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundTask
</UL>

<P><STRONG><a name="[12b]"></a>Delay1ms</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, st7735.o(i.Delay1ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Delay1ms
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commonInit
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandList
</UL>

<P><STRONG><a name="[a6]"></a>Draw_Borders</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stage.o(i.Draw_Borders))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = Draw_Borders &rArr; Draw_Borders_Up &rArr; ST7735_DrawBitmap &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Borders_Up
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Borders_Right
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Borders_Left
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Borders_Down
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[a9]"></a>Draw_Borders_Down</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, stage.o(i.Draw_Borders_Down))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = Draw_Borders_Down &rArr; ST7735_DrawBitmap &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawBitmap
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Use_Shortsword
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Use_Mjolnir
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Use_MSword
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Use_BGSword
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Borders
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[aa]"></a>Draw_Borders_Left</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, stage.o(i.Draw_Borders_Left))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = Draw_Borders_Left &rArr; ST7735_DrawBitmap &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawBitmap
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Use_Shortsword
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Use_Mjolnir
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Use_MSword
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Use_BGSword
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Borders
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a8]"></a>Draw_Borders_Right</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, stage.o(i.Draw_Borders_Right))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = Draw_Borders_Right &rArr; ST7735_DrawBitmap &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawBitmap
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Use_Shortsword
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Use_Mjolnir
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Use_MSword
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Use_BGSword
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Borders
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a7]"></a>Draw_Borders_Up</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, stage.o(i.Draw_Borders_Up))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = Draw_Borders_Up &rArr; ST7735_DrawBitmap &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawBitmap
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Use_Shortsword
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Use_Mjolnir
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Use_MSword
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Use_BGSword
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Borders
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ab]"></a>Draw_Health</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, legendofzorlda.o(i.Draw_Health))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = Draw_Health &rArr; ST7735_DrawBitmap &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawBitmap
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ac]"></a>Draw_Item</STRONG> (Thumb, 674 bytes, Stack size 16 bytes, legendofzorlda.o(i.Draw_Item))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = Draw_Item &rArr; ST7735_DrawString &rArr; ST7735_DrawCharS &rArr; ST7735_FillRect &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawString
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawBitmap
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[82]"></a>Ending</STRONG> (Thumb, 816 bytes, Stack size 16 bytes, legendofzorlda.o(i.Ending))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = Ending &rArr; LCD_OutDec &rArr;  LCD_OutDec (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_SetCursor
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawString
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawChar
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawBitmap
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_OutDec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> legendofzorlda.o(i.main)
</UL>
<P><STRONG><a name="[b0]"></a>Entity_Fire</STRONG> (Thumb, 302 bytes, Stack size 24 bytes, entity.o(i.Entity_Fire))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Entity_Fire &rArr; Make_Proj &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Proj
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Move
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[b2]"></a>Explode_Bomb</STRONG> (Thumb, 1136 bytes, Stack size 24 bytes, proj.o(i.Explode_Bomb))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Explode_Bomb &rArr; Check_Overlap
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Overlap
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Explode
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[f4]"></a>Find_Conflict</STRONG> (Thumb, 176 bytes, Stack size 28 bytes, entity.o(i.Find_Conflict))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Find_Conflict
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Enemy_Random
</UL>

<P><STRONG><a name="[11]"></a>GPIOPortE_Handler</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, item.o(i.GPIOPortE_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIOPortE_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Switch_Item
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>GPIOPortF_Handler</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, legendofzorlda.o(i.GPIOPortF_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIOPortF_Handler &rArr; Music_Resume
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Music_Resume
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Music_Pause
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[c7]"></a>Make_Bear</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, entity.o(i.Make_Bear))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Make_Bear
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Lava4Stage
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Ice1Stage
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Ganon1BossStage
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Bush2Stage
</UL>

<P><STRONG><a name="[b9]"></a>Make_BlueChest</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, entity.o(i.Make_BlueChest))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = Make_BlueChest
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Random
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Item
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Shop
</UL>

<P><STRONG><a name="[bd]"></a>Make_Brick</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, entity.o(i.Make_Brick))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Make_Brick
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_LynelBossStage
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Brick2Stage
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Brick1Stage
</UL>

<P><STRONG><a name="[bc]"></a>Make_Brick1Stage</STRONG> (Thumb, 480 bytes, Stack size 16 bytes, stage.o(i.Make_Brick1Stage))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Make_Brick1Stage &rArr; Make_Skeleton
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Skeleton
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Ebat
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Brick
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Floor
</UL>

<P><STRONG><a name="[c0]"></a>Make_Brick2Stage</STRONG> (Thumb, 586 bytes, Stack size 16 bytes, stage.o(i.Make_Brick2Stage))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Make_Brick2Stage &rArr; Make_Spider
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Spider
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Skeleton
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Ebat
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_BrickArrows
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Brick
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Floor
</UL>

<P><STRONG><a name="[c2]"></a>Make_BrickArrows</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, entity.o(i.Make_BrickArrows))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Make_BrickArrows
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Brick2Stage
</UL>

<P><STRONG><a name="[ec]"></a>Make_BrownChest</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, entity.o(i.Make_BrownChest))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Shop
</UL>

<P><STRONG><a name="[c4]"></a>Make_Bush</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, entity.o(i.Make_Bush))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Make_Bush
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_SlimeBossStage
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Bush2Stage
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Bush1Stage
</UL>

<P><STRONG><a name="[c3]"></a>Make_Bush1Stage</STRONG> (Thumb, 292 bytes, Stack size 16 bytes, stage.o(i.Make_Bush1Stage))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Make_Bush1Stage &rArr; Make_Slime
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Slime
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Bush
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Floor
</UL>

<P><STRONG><a name="[c6]"></a>Make_Bush2Stage</STRONG> (Thumb, 376 bytes, Stack size 16 bytes, stage.o(i.Make_Bush2Stage))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Make_Bush2Stage &rArr; Make_Snake
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Snake
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Slime
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Bush
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Bear
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Floor
</UL>

<P><STRONG><a name="[e6]"></a>Make_Crab</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, entity.o(i.Make_Crab))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Make_Crab
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Water2Stage
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Water1Stage
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_OrcBossStage
</UL>

<P><STRONG><a name="[e8]"></a>Make_Dekuscrub</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, entity.o(i.Make_Dekuscrub))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Make_Dekuscrub
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Water2Stage
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_OrcBossStage
</UL>

<P><STRONG><a name="[be]"></a>Make_Ebat</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, entity.o(i.Make_Ebat))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Make_Ebat
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_LynelBossStage
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Brick2Stage
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Brick1Stage
</UL>

<P><STRONG><a name="[b4]"></a>Make_Explode</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, entity.o(i.Make_Explode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Make_Explode
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Explode_Bomb
</UL>

<P><STRONG><a name="[e1]"></a>Make_Fbow</STRONG> (Thumb, 82 bytes, Stack size 12 bytes, entity.o(i.Make_Fbow))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Make_Fbow
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Ice2Stage
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Ice1Stage
</UL>

<P><STRONG><a name="[c9]"></a>Make_Floor</STRONG> (Thumb, 1078 bytes, Stack size 16 bytes, legendofzorlda.o(i.Make_Floor))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = Make_Floor &rArr; Make_Shop &rArr; Make_RedChest
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Next_Rooms
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Water2Stage
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Water1Stage
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Stairs
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_SlimeBossStage
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Shop
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_OrcBossStage
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_LynelBossStage
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Lava4Stage
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Lava3Stage
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Lava2Stage
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Lava1Stage
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_IcegolemBossStage
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Ice3Stage
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Ice2Stage
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Ice1Stage
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Ganon1BossStage
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Bush2Stage
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Bush1Stage
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Brick2Stage
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Brick1Stage
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[dc]"></a>Make_Ganon1Boss</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, entity.o(i.Make_Ganon1Boss))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Make_Ganon1Boss
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Ganon1BossStage
</UL>

<P><STRONG><a name="[d9]"></a>Make_Ganon1BossStage</STRONG> (Thumb, 474 bytes, Stack size 16 bytes, stage.o(i.Make_Ganon1BossStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Make_Ganon1BossStage &rArr; Make_Skelebomber
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Skelebomber
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Lava
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Ganon1Boss
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Bear
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Floor
</UL>

<P><STRONG><a name="[138]"></a>Make_Ganon2Boss</STRONG> (Thumb, 82 bytes, Stack size 12 bytes, entity.o(i.Make_Ganon2Boss))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Make_Ganon2Boss
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[de]"></a>Make_GreenChest</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, entity.o(i.Make_GreenChest))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = Make_GreenChest
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Random
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Item
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Shop
</UL>

<P><STRONG><a name="[129]"></a>Make_HShieldObs</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, entity.o(i.Make_HShieldObs))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Make_HShieldObs
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Use_HShield
</UL>

<P><STRONG><a name="[df]"></a>Make_Ice</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, entity.o(i.Make_Ice))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Make_Ice
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_IcegolemBossStage
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Ice2Stage
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Ice1Stage
</UL>

<P><STRONG><a name="[d2]"></a>Make_Ice1Stage</STRONG> (Thumb, 556 bytes, Stack size 16 bytes, stage.o(i.Make_Ice1Stage))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Make_Ice1Stage &rArr; Make_Snowman
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Snowman
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Ice
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Fbow
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Bear
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Floor
</UL>

<P><STRONG><a name="[d3]"></a>Make_Ice2Stage</STRONG> (Thumb, 634 bytes, Stack size 16 bytes, stage.o(i.Make_Ice2Stage))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Make_Ice2Stage &rArr; Make_Snowman
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Snowman
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Ice
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Fbow
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Floor
</UL>

<P><STRONG><a name="[d4]"></a>Make_Ice3Stage</STRONG> (Thumb, 498 bytes, Stack size 16 bytes, stage.o(i.Make_Ice3Stage))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Make_Ice3Stage &rArr; Make_Snowman
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Snowman
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Floor
</UL>

<P><STRONG><a name="[d5]"></a>Make_IcegolemBossStage</STRONG> (Thumb, 422 bytes, Stack size 16 bytes, stage.o(i.Make_IcegolemBossStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Make_IcegolemBossStage &rArr; Make_icegolemBoss
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_icegolemBoss
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Snowman
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Ice
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Floor
</UL>

<P><STRONG><a name="[db]"></a>Make_Lava</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, entity.o(i.Make_Lava))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Make_Lava
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Lava4Stage
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Lava2Stage
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Lava1Stage
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Ganon1BossStage
</UL>

<P><STRONG><a name="[d6]"></a>Make_Lava1Stage</STRONG> (Thumb, 690 bytes, Stack size 16 bytes, stage.o(i.Make_Lava1Stage))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Make_Lava1Stage &rArr; Make_Skeleton
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Skeleton
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Skelebomber
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Lava
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Floor
</UL>

<P><STRONG><a name="[d7]"></a>Make_Lava2Stage</STRONG> (Thumb, 510 bytes, Stack size 16 bytes, stage.o(i.Make_Lava2Stage))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Make_Lava2Stage &rArr; Make_Skeleton
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Skeleton
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Skelebomber
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Lava
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Floor
</UL>

<P><STRONG><a name="[d8]"></a>Make_Lava3Stage</STRONG> (Thumb, 470 bytes, Stack size 16 bytes, stage.o(i.Make_Lava3Stage))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Make_Lava3Stage &rArr; Make_Skeleton
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Skeleton
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Skelebomber
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Floor
</UL>

<P><STRONG><a name="[da]"></a>Make_Lava4Stage</STRONG> (Thumb, 718 bytes, Stack size 16 bytes, stage.o(i.Make_Lava4Stage))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Make_Lava4Stage &rArr; Make_Skeleton
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Skeleton
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Skelebomber
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Lava
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Bear
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Floor
</UL>

<P><STRONG><a name="[131]"></a>Make_Lonk</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, player.o(i.Make_Lonk))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e3]"></a>Make_LynelBoss</STRONG> (Thumb, 82 bytes, Stack size 12 bytes, entity.o(i.Make_LynelBoss))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Make_LynelBoss
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_LynelBossStage
</UL>

<P><STRONG><a name="[d1]"></a>Make_LynelBossStage</STRONG> (Thumb, 422 bytes, Stack size 16 bytes, stage.o(i.Make_LynelBossStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Make_LynelBossStage &rArr; Make_Spider
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Spider
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Skeleton
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_LynelBoss
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Ebat
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Brick
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Floor
</UL>

<P><STRONG><a name="[d0]"></a>Make_OrcBossStage</STRONG> (Thumb, 578 bytes, Stack size 16 bytes, stage.o(i.Make_OrcBossStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Make_OrcBossStage &rArr; Make_orcBoss
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_orcBoss
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Water
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Squid
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Dekuscrub
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Crab
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Floor
</UL>

<P><STRONG><a name="[b1]"></a>Make_Proj</STRONG> (Thumb, 1940 bytes, Stack size 16 bytes, proj.o(i.Make_Proj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Make_Proj &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Omni_Fire
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Entity_Fire
</UL>

<P><STRONG><a name="[e9]"></a>Make_Proj_Player</STRONG> (Thumb, 2022 bytes, Stack size 16 bytes, proj.o(i.Make_Proj_Player))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Make_Proj_Player &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Use_Needles
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Use_Mjolnir
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Use_MSword
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Use_LightBow
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Use_FireRod
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Use_Dekunuts
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Use_Bow
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Use_Bombchu
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Use_Bomb
</UL>

<P><STRONG><a name="[ea]"></a>Make_RedChest</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, entity.o(i.Make_RedChest))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = Make_RedChest
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Random
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Item
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Shop
</UL>

<P><STRONG><a name="[137]"></a>Make_Rup</STRONG> (Thumb, 126 bytes, Stack size 0 bytes, rupoo.o(i.Make_Rup))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cc]"></a>Make_Shop</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, stage.o(i.Make_Shop))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = Make_Shop &rArr; Make_RedChest
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Shopkeeper
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_RedChest
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_GreenChest
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_BrownChest
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_BlueChest
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Floor
</UL>

<P><STRONG><a name="[eb]"></a>Make_Shopkeeper</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, entity.o(i.Make_Shopkeeper))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Make_Shopkeeper
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Shop
</UL>

<P><STRONG><a name="[dd]"></a>Make_Skelebomber</STRONG> (Thumb, 82 bytes, Stack size 12 bytes, entity.o(i.Make_Skelebomber))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Make_Skelebomber
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Lava4Stage
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Lava3Stage
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Lava2Stage
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Lava1Stage
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Ganon1BossStage
</UL>

<P><STRONG><a name="[bf]"></a>Make_Skeleton</STRONG> (Thumb, 82 bytes, Stack size 12 bytes, entity.o(i.Make_Skeleton))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Make_Skeleton
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_LynelBossStage
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Lava4Stage
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Lava3Stage
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Lava2Stage
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Lava1Stage
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Brick2Stage
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Brick1Stage
</UL>

<P><STRONG><a name="[c5]"></a>Make_Slime</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, entity.o(i.Make_Slime))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Make_Slime
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_SlimeBossStage
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Bush2Stage
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Bush1Stage
</UL>

<P><STRONG><a name="[cd]"></a>Make_SlimeBossStage</STRONG> (Thumb, 448 bytes, Stack size 16 bytes, stage.o(i.Make_SlimeBossStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Make_SlimeBossStage &rArr; Make_slimeBoss
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_slimeBoss
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Slime
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Bush
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Floor
</UL>

<P><STRONG><a name="[c8]"></a>Make_Snake</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, entity.o(i.Make_Snake))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Make_Snake
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Bush2Stage
</UL>

<P><STRONG><a name="[e0]"></a>Make_Snowman</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, entity.o(i.Make_Snowman))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Make_Snowman
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_IcegolemBossStage
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Ice3Stage
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Ice2Stage
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Ice1Stage
</UL>

<P><STRONG><a name="[c1]"></a>Make_Spider</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, entity.o(i.Make_Spider))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Make_Spider
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_LynelBossStage
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Brick2Stage
</UL>

<P><STRONG><a name="[e7]"></a>Make_Squid</STRONG> (Thumb, 82 bytes, Stack size 12 bytes, entity.o(i.Make_Squid))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Make_Squid
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Water2Stage
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Water1Stage
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_OrcBossStage
</UL>

<P><STRONG><a name="[ee]"></a>Make_StairObstacle</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, entity.o(i.Make_StairObstacle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Make_StairObstacle
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Stairs
</UL>

<P><STRONG><a name="[cb]"></a>Make_Stairs</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, stage.o(i.Make_Stairs))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Make_Stairs &rArr; Make_StairObstacle
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_StairObstacle
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Floor
</UL>

<P><STRONG><a name="[132]"></a>Make_Valvano</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, player.o(i.Make_Valvano))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12a]"></a>Make_WShieldObs</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, entity.o(i.Make_WShieldObs))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Make_WShieldObs
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Use_WoodShield
</UL>

<P><STRONG><a name="[e4]"></a>Make_Water</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, entity.o(i.Make_Water))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Make_Water
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Water2Stage
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Water1Stage
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_OrcBossStage
</UL>

<P><STRONG><a name="[ce]"></a>Make_Water1Stage</STRONG> (Thumb, 526 bytes, Stack size 16 bytes, stage.o(i.Make_Water1Stage))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Make_Water1Stage &rArr; Make_Squid
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Water
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Squid
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Crab
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Floor
</UL>

<P><STRONG><a name="[cf]"></a>Make_Water2Stage</STRONG> (Thumb, 426 bytes, Stack size 16 bytes, stage.o(i.Make_Water2Stage))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Make_Water2Stage &rArr; Make_Squid
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Water
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Squid
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Dekuscrub
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Crab
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Floor
</UL>

<P><STRONG><a name="[133]"></a>Make_Yerraballi</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, player.o(i.Make_Yerraballi))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e2]"></a>Make_icegolemBoss</STRONG> (Thumb, 82 bytes, Stack size 12 bytes, entity.o(i.Make_icegolemBoss))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Make_icegolemBoss
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_IcegolemBossStage
</UL>

<P><STRONG><a name="[e5]"></a>Make_orcBoss</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, entity.o(i.Make_orcBoss))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Make_orcBoss
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_OrcBossStage
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ed]"></a>Make_slimeBoss</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, entity.o(i.Make_slimeBoss))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Make_slimeBoss
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_SlimeBossStage
</UL>

<P><STRONG><a name="[ef]"></a>Move_Enemy</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, entity.o(i.Move_Enemy))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = Move_Enemy &rArr; Teleport_Enemy &rArr; ST7735_DrawBitmap &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Teleport_Enemy
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Enemy_Random
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Enemy_Proj
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Enemy_Homing
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[f1]"></a>Move_Enemy_Homing</STRONG> (Thumb, 388 bytes, Stack size 32 bytes, entity.o(i.Move_Enemy_Homing))
<BR><BR>[Stack]<UL><LI>Max Depth = 84 + Unknown Stack Size
<LI>Call Chain = Move_Enemy_Homing &rArr; Move_Enemy_Random &rArr; Find_Conflict
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Move
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Enemy_Random
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Enemy
</UL>

<P><STRONG><a name="[f2]"></a>Move_Enemy_Proj</STRONG> (Thumb, 508 bytes, Stack size 32 bytes, entity.o(i.Move_Enemy_Proj))
<BR><BR>[Stack]<UL><LI>Max Depth = 84 + Unknown Stack Size
<LI>Call Chain = Move_Enemy_Proj &rArr; Move_Enemy_Random &rArr; Find_Conflict
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Move
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Enemy_Random
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Enemy
</UL>

<P><STRONG><a name="[f0]"></a>Move_Enemy_Random</STRONG> (Thumb, 454 bytes, Stack size 24 bytes, entity.o(i.Move_Enemy_Random))
<BR><BR>[Stack]<UL><LI>Max Depth = 52 + Unknown Stack Size
<LI>Call Chain = Move_Enemy_Random &rArr; Find_Conflict
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Random
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Move
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Conflict
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Enemy
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Enemy_Proj
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Enemy_Homing
</UL>

<P><STRONG><a name="[f5]"></a>Move_Proj</STRONG> (Thumb, 514 bytes, Stack size 16 bytes, proj.o(i.Move_Proj))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Move_Proj &rArr; Check_Move
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Redraw_All
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Walls
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Move
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[f8]"></a>Music_Init</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, music.o(i.Music_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Music_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer3A_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b8]"></a>Music_Pause</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, music.o(i.Music_Pause))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sound_hyah
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sound_Projectile
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sound_Hit
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPortF_Handler
</UL>

<P><STRONG><a name="[128]"></a>Music_Play</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, music.o(i.Music_Play))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer3A_Handler
</UL>

<P><STRONG><a name="[b7]"></a>Music_Resume</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, music.o(i.Music_Resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Music_Resume
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sound_PlayMusic
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundTask
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPortF_Handler
</UL>

<P><STRONG><a name="[ca]"></a>Next_Rooms</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, stage.o(i.Next_Rooms))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Next_Rooms
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Floor
</UL>

<P><STRONG><a name="[fb]"></a>Omni_Fire</STRONG> (Thumb, 292 bytes, Stack size 40 bytes, entity.o(i.Omni_Fire))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Omni_Fire &rArr; Make_Proj &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Proj
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Move
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[fc]"></a>Output_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, st7735.o(i.Output_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = Output_Init &rArr; ST7735_InitR &rArr; ST7735_FillScreen &rArr; ST7735_FillRect &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_FillScreen
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_InitR
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ff]"></a>Player_Move_Down</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, player.o(i.Player_Move_Down))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Player_Move_Down &rArr; Check_Move_Player &rArr; Check_Move
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Move_Player
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[100]"></a>Player_Move_Left</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, player.o(i.Player_Move_Left))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Player_Move_Left &rArr; Check_Move_Player &rArr; Check_Move
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Move_Player
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[101]"></a>Player_Move_Right</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, player.o(i.Player_Move_Right))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Player_Move_Right &rArr; Check_Move_Player &rArr; Check_Move
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Move_Player
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[102]"></a>Player_Move_Up</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, player.o(i.Player_Move_Up))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Player_Move_Up &rArr; Check_Move_Player &rArr; Check_Move
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Move_Player
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[f6]"></a>Redraw_All</STRONG> (Thumb, 212 bytes, Stack size 12 bytes, stage.o(i.Redraw_All))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Redraw_All
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Proj
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[a2]"></a>ST7735_DrawBitmap</STRONG> (Thumb, 280 bytes, Stack size 40 bytes, st7735.o(i.ST7735_DrawBitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = ST7735_DrawBitmap &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writedata
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAddrWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Borders_Up
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Borders_Right
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Borders_Left
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Borders_Down
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Obstacles
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Damage
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ending
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Item
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Health
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Teleport_Enemy
</UL>

<P><STRONG><a name="[105]"></a>ST7735_DrawBitmap2</STRONG> (Thumb, 328 bytes, Stack size 40 bytes, st7735.o(i.ST7735_DrawBitmap2))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = ST7735_DrawBitmap2 &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAddrWindow
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushColor
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Use_Shortsword
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Use_Mjolnir
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Use_MSword
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Use_LightBow
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Use_Bow
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Use_BGSword
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ae]"></a>ST7735_DrawChar</STRONG> (Thumb, 260 bytes, Stack size 56 bytes, st7735.o(i.ST7735_DrawChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = ST7735_DrawChar &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAddrWindow
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushColor
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ending
</UL>

<P><STRONG><a name="[107]"></a>ST7735_DrawCharS</STRONG> (Thumb, 236 bytes, Stack size 48 bytes, st7735.o(i.ST7735_DrawCharS))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = ST7735_DrawCharS &rArr; ST7735_FillRect &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_FillRect
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_OutChar
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawString
</UL>

<P><STRONG><a name="[108]"></a>ST7735_DrawPixel</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, st7735.o(i.ST7735_DrawPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = ST7735_DrawPixel &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAddrWindow
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushColor
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawCharS
</UL>

<P><STRONG><a name="[ad]"></a>ST7735_DrawString</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, st7735.o(i.ST7735_DrawString))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = ST7735_DrawString &rArr; ST7735_DrawCharS &rArr; ST7735_FillRect &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawCharS
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_OutChar
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ending
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Item
</UL>

<P><STRONG><a name="[109]"></a>ST7735_FillRect</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, st7735.o(i.ST7735_FillRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = ST7735_FillRect &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writedata
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAddrWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_FillScreen
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawCharS
</UL>

<P><STRONG><a name="[fe]"></a>ST7735_FillScreen</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, st7735.o(i.ST7735_FillScreen))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = ST7735_FillScreen &rArr; ST7735_FillRect &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_FillRect
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Output_Init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_InitR
</UL>

<P><STRONG><a name="[fd]"></a>ST7735_InitR</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, st7735.o(i.ST7735_InitR))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = ST7735_InitR &rArr; ST7735_FillScreen &rArr; ST7735_FillRect &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_SetCursor
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_FillScreen
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writedata
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writecommand
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commonInit
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandList
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Output_Init
</UL>

<P><STRONG><a name="[a1]"></a>ST7735_InvertDisplay</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, st7735.o(i.ST7735_InvertDisplay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = ST7735_InvertDisplay
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writecommand
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Damage
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[94]"></a>ST7735_OutChar</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, st7735.o(i.ST7735_OutChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = ST7735_OutChar &rArr; ST7735_DrawString &rArr; ST7735_DrawCharS &rArr; ST7735_FillRect &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawString
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawCharS
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_OutString
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_OutFix
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_OutDec
</UL>

<P><STRONG><a name="[10d]"></a>ST7735_OutString</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, st7735.o(i.ST7735_OutString), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_OutChar
</UL>

<P><STRONG><a name="[af]"></a>ST7735_SetCursor</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, st7735.o(i.ST7735_SetCursor))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ending
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_InitR
</UL>

<P><STRONG><a name="[10e]"></a>ST7735_SetRotation</STRONG> (Thumb, 196 bytes, Stack size 8 bytes, st7735.o(i.ST7735_SetRotation))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = ST7735_SetRotation
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writedata
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writecommand
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[80]"></a>Sample_Joystick</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, legendofzorlda.o(i.Sample_Joystick))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Sample_Joystick
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_InY
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_InX
</UL>
<BR>[Address Reference Count : 1]<UL><LI> legendofzorlda.o(i.main)
</UL>
<P><STRONG><a name="[81]"></a>ScoreTrack</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, legendofzorlda.o(i.ScoreTrack))
<BR>[Address Reference Count : 1]<UL><LI> legendofzorlda.o(i.main)
</UL>
<P><STRONG><a name="[7f]"></a>SoundTask</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, sound.o(i.SoundTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SoundTask &rArr; Music_Resume
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Music_Resume
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Out
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sound.o(i.Sound_Init)
</UL>
<P><STRONG><a name="[112]"></a>Sound_Hit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, sound.o(i.Sound_Hit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Sound_Hit
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sound_Play
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Music_Pause
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Use_WoodShield
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Use_Shortsword
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Use_Quake
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Use_IceRod
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Use_HShield
</UL>

<P><STRONG><a name="[114]"></a>Sound_Init</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, sound.o(i.Sound_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Sound_Init &rArr; DAC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[113]"></a>Sound_Play</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sound.o(i.Sound_Play))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sound_hyah
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sound_Projectile
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sound_Hit
</UL>

<P><STRONG><a name="[fa]"></a>Sound_PlayMusic</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, sound.o(i.Sound_PlayMusic))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Music_Resume
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer3A_Handler
</UL>

<P><STRONG><a name="[116]"></a>Sound_Projectile</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, sound.o(i.Sound_Projectile))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Sound_Projectile
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sound_Play
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Music_Pause
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Use_Needles
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Use_LightBow
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Use_Dekunuts
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Use_Bow
</UL>

<P><STRONG><a name="[117]"></a>Sound_hyah</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, sound.o(i.Sound_hyah))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Sound_hyah
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sound_Play
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Music_Pause
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Use_Shortsword
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Use_Mjolnir
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Use_MSword
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Use_BGSword
</UL>

<P><STRONG><a name="[b6]"></a>Switch_Item</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, player.o(i.Switch_Item))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPortE_Handler
</UL>

<P><STRONG><a name="[c]"></a>SysTick_Handler</STRONG> (Thumb, 1678 bytes, Stack size 32 bytes, legendofzorlda.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = SysTick_Handler &rArr; ST7735_DrawString &rArr; ST7735_DrawCharS &rArr; ST7735_FillRect &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Use_WoodShield
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Use_Shortsword
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Use_Quake
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Use_Needles
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Use_Mjolnir
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Use_MSword
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Use_LightBow
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Use_IceRod
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Use_HShield
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Use_FireRod
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Use_Dekunuts
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Use_Bow
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Use_Bombchu
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Use_Bomb
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Use_BGSword
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_SetRotation
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_InvertDisplay
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_FillScreen
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawString
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawBitmap
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Redraw_All
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Player_Move_Up
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Player_Move_Right
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Player_Move_Left
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Player_Move_Down
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Omni_Fire
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Proj
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Enemy
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Explode_Bomb
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Entity_Fire
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Borders
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Rupoos
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Overlap
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Damage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[135]"></a>SysTick_Init</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, legendofzorlda.o(i.SysTick_Init))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f3]"></a>Teleport_Enemy</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, entity.o(i.Teleport_Enemy))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = Teleport_Enemy &rArr; ST7735_DrawBitmap &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Random
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawBitmap
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Move
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Enemy
</UL>

<P><STRONG><a name="[20]"></a>Timer0A_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, timer0.o(i.Timer0A_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Timer0A_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[12f]"></a>Timer0_Init</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, timer0.o(i.Timer0_Init))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[22]"></a>Timer1A_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, timer1.o(i.Timer1A_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Timer1A_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[136]"></a>Timer1_Init</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, timer1.o(i.Timer1_Init))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[24]"></a>Timer2A_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sound.o(i.Timer2A_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Timer2A_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>Timer3A_Handler</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, music.o(i.Timer3A_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Timer3A_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sound_PlayMusic
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Music_Play
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[f9]"></a>Timer3A_Init</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, music.o(i.Timer3A_Init))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Music_Init
</UL>

<P><STRONG><a name="[11f]"></a>Use_BGSword</STRONG> (Thumb, 1368 bytes, Stack size 32 bytes, item.o(i.Use_BGSword))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = Use_BGSword &rArr; Draw_Borders_Up &rArr; ST7735_DrawBitmap &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sound_hyah
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawBitmap2
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Borders_Up
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Borders_Right
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Borders_Left
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Borders_Down
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Overlap
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[11e]"></a>Use_Bomb</STRONG> (Thumb, 330 bytes, Stack size 8 bytes, item.o(i.Use_Bomb))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Use_Bomb &rArr; Check_Move
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Move
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Proj_Player
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[120]"></a>Use_Bombchu</STRONG> (Thumb, 330 bytes, Stack size 8 bytes, item.o(i.Use_Bombchu))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Use_Bombchu &rArr; Check_Move
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Move
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Proj_Player
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[11b]"></a>Use_Bow</STRONG> (Thumb, 590 bytes, Stack size 16 bytes, item.o(i.Use_Bow))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = Use_Bow &rArr; ST7735_DrawBitmap2 &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sound_Projectile
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawBitmap2
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Move
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Proj_Player
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[11c]"></a>Use_Dekunuts</STRONG> (Thumb, 334 bytes, Stack size 8 bytes, item.o(i.Use_Dekunuts))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Use_Dekunuts &rArr; Check_Move
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sound_Projectile
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Move
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Proj_Player
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[123]"></a>Use_FireRod</STRONG> (Thumb, 256 bytes, Stack size 8 bytes, item.o(i.Use_FireRod))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Use_FireRod &rArr; Check_Move
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Move
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Proj_Player
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[122]"></a>Use_HShield</STRONG> (Thumb, 796 bytes, Stack size 16 bytes, item.o(i.Use_HShield))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Use_HShield &rArr; Check_Move
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sound_Hit
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Move
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_HShieldObs
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[121]"></a>Use_IceRod</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, item.o(i.Use_IceRod))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Use_IceRod &rArr; Sound_Hit
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sound_Hit
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[125]"></a>Use_LightBow</STRONG> (Thumb, 784 bytes, Stack size 16 bytes, item.o(i.Use_LightBow))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = Use_LightBow &rArr; ST7735_DrawBitmap2 &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sound_Projectile
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawBitmap2
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Move
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Proj_Player
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[126]"></a>Use_MSword</STRONG> (Thumb, 1518 bytes, Stack size 32 bytes, item.o(i.Use_MSword))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = Use_MSword &rArr; Draw_Borders_Up &rArr; ST7735_DrawBitmap &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sound_hyah
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawBitmap2
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Borders_Up
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Borders_Right
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Borders_Left
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Borders_Down
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Overlap
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Move
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Proj_Player
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[127]"></a>Use_Mjolnir</STRONG> (Thumb, 1568 bytes, Stack size 32 bytes, item.o(i.Use_Mjolnir))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = Use_Mjolnir &rArr; Draw_Borders_Up &rArr; ST7735_DrawBitmap &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sound_hyah
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawBitmap2
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Borders_Up
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Borders_Right
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Borders_Left
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Borders_Down
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Overlap
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Move
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Proj_Player
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[11d]"></a>Use_Needles</STRONG> (Thumb, 478 bytes, Stack size 8 bytes, item.o(i.Use_Needles))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Use_Needles &rArr; Check_Move
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sound_Projectile
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Move
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Proj_Player
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[124]"></a>Use_Quake</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, item.o(i.Use_Quake))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Use_Quake &rArr; Sound_Hit
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sound_Hit
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[119]"></a>Use_Shortsword</STRONG> (Thumb, 1544 bytes, Stack size 32 bytes, item.o(i.Use_Shortsword))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = Use_Shortsword &rArr; Draw_Borders_Up &rArr; ST7735_DrawBitmap &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sound_hyah
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sound_Hit
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawBitmap2
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Borders_Up
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Borders_Right
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Borders_Left
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Borders_Down
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Overlap
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[11a]"></a>Use_WoodShield</STRONG> (Thumb, 862 bytes, Stack size 16 bytes, item.o(i.Use_WoodShield))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Use_WoodShield &rArr; Check_Move
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sound_Hit
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Move
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_WShieldObs
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[8d]"></a>main</STRONG> (Thumb, 4850 bytes, Stack size 48 bytes, legendofzorlda.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = main &rArr; LCD_OutDec &rArr;  LCD_OutDec (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer1_Init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0_Init
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExaS_Init
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sound_Init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_SetCursor
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_FillScreen
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawString
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawBitmap2
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawBitmap
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Redraw_All
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Random_Init
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Output_Init
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Music_Play
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Music_Init
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_orcBoss
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Yerraballi
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Valvano
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Rup
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Lonk
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Ganon2Boss
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_OutDec
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableInterrupts
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Borders_Up
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Borders_Right
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Borders_Left
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Borders_Down
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Borders
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableInterrupts
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Obstacles
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Adjacent
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Floor
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Item
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Health
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_Init
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[10b]"></a>commandList</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, st7735.o(i.commandList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = commandList &rArr; Delay1ms
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writedata
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writecommand
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay1ms
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_InitR
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commonInit
</UL>

<P><STRONG><a name="[10a]"></a>commonInit</STRONG> (Thumb, 342 bytes, Stack size 8 bytes, st7735.o(i.commonInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = commonInit &rArr; commandList &rArr; Delay1ms
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay1ms
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandList
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_InitR
</UL>

<P><STRONG><a name="[106]"></a>pushColor</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, st7735.o(i.pushColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = pushColor
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writedata
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawChar
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawBitmap2
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawPixel
</UL>

<P><STRONG><a name="[103]"></a>setAddrWindow</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, st7735.o(i.setAddrWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writedata
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writecommand
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawChar
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawBitmap2
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawBitmap
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_FillRect
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawPixel
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
